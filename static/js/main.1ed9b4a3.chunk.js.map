{"version":3,"sources":["components/PokeCard.jsx","components/Pokedex.jsx","components/PokeGame.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["PokeCard","oldID","this","props","id","types","name","exp","otherInfo","abilities","getTypes","typeRow","length","map","t","idx","type","concat","getRandomFact","facts","len","Math","floor","random","flavor_text","checkFontColor","color","console","log","chroma","luminance","width","height","behavior","levitate","className","style","backgroundColor","src","slice","alt","habitat","a","ability","getAbilities","is_legendary","is_mythical","flavor_text_entries","filter","ft","language","getFunFact","Component","Pokedex","isWinner","totalExp","pokemon","poke","base_experience","key","defaultProps","POKE_API_BASE_URL","PokeGame","state","hand1","hand2","isLoading","totalPokemon","init","initializeHand","totalData1","totalData2","setState","document","querySelector","classList","remove","getTotalPokemon","Axios","get","res","data","count","getRandomPoke","e","hand","i","rand","push","totalData","handleClick","add","calcExp","pokedex","forEach","p1","p2","p1Exp","p2Exp","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1ed9b4a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactCardFlipper from \"react-card-flipper\";\r\nimport chroma from \"chroma-js\";\r\nimport \"../css/PokeCard.css\";\r\n\r\nexport default class PokeCard extends Component {\r\n  render() {\r\n    const { id, types, name, exp, otherInfo, abilities } = this.props;\r\n    const paddingID = oldID =>\r\n      oldID <= 999 ? `00${oldID}`.slice(-3) : oldID;\r\n\r\n    const getAbilities = () => {\r\n      let typeRow = \"\";\r\n      abilities.length\r\n        ? abilities.map((a, idx) => {\r\n            if (idx === 0) {\r\n              return (typeRow = a.ability.name);\r\n            }\r\n            return (typeRow = typeRow.concat(\", \").concat(a.ability.name));\r\n          })\r\n        : (typeRow = \" N/A\");\r\n      return typeRow;\r\n    };\r\n\r\n    const getTypes = () => {\r\n      let typeRow = \"\";\r\n      types.length\r\n        ? types.map((t, idx) => {\r\n            if (idx === 0) {\r\n              return (typeRow = t.type.name);\r\n            }\r\n            return (typeRow = typeRow.concat(\", \").concat(t.type.name));\r\n          })\r\n        : (typeRow = \"\");\r\n\r\n      return typeRow;\r\n    };\r\n\r\n    const getFunFact = () => {\r\n      const facts = otherInfo.flavor_text_entries.filter(\r\n        ft => ft.language.name === \"en\"\r\n      );\r\n      return getRandomFact(facts);\r\n    };\r\n\r\n    const getRandomFact = facts => {\r\n      const len = facts.length;\r\n      const rand = Math.floor(Math.random() * len);\r\n      return facts[rand].flavor_text;\r\n    };\r\n\r\n    const checkFontColor = color => {\r\n      console.log(color);\r\n      console.log(chroma(color).luminance());\r\n      return chroma(color).luminance() < 0.08;\r\n    };\r\n\r\n    const getCardColor = () => {\r\n      if (otherInfo.color)\r\n        return checkFontColor(otherInfo.color.name) ? \"PokeCard-grey\" : \"\";\r\n      return \"\";\r\n    };\r\n\r\n    return (\r\n      <ReactCardFlipper\r\n        width=\"225px\"\r\n        height=\"370px\"\r\n        behavior=\"click\"\r\n        levitate={true}\r\n        className=\"PokeCard-flipper\"\r\n      >\r\n        <div\r\n          className={`PokeCard ${getCardColor()}`}\r\n          style={{ backgroundColor: otherInfo.color.name }}\r\n        >\r\n          <h2 className={`PokeCard-title `}>{name}</h2>{\" \"}\r\n          <div className=\"PokeCard-image\">\r\n            <img\r\n              src={`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${paddingID(\r\n                id\r\n              )}.png`}\r\n              alt={`${name}`}\r\n            />\r\n          </div>\r\n          <p>Types: {getTypes()}</p>\r\n          <p className=\"PokeCard-p\">EXP: {exp}</p>{\" \"}\r\n        </div>\r\n\r\n        <div\r\n          className={`PokeCard ${\r\n            checkFontColor(otherInfo.color.name) ? \"PokeCard-grey\" : \"\"\r\n          }`}\r\n          style={{ backgroundColor: otherInfo.color.name }}\r\n        >\r\n          <h2 className=\"PokeCard-title\">{name}</h2>{\" \"}\r\n          <p>Types: {getTypes()}</p>\r\n          <p>\r\n            Habitat: {otherInfo.habitat ? otherInfo.habitat.name : \"N/A\"}\r\n          </p>\r\n          <ul>Abilities: {getAbilities()}</ul>\r\n          <p>\r\n            {otherInfo.is_legendary ? <span>Legendary</span> : \"\"}{\" \"}\r\n            {otherInfo.is_mythical ? <span>Mythical</span> : \"\"}{\" \"}\r\n          </p>\r\n          <p>Fun Fact: {getFunFact()}</p>\r\n        </div>\r\n      </ReactCardFlipper>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Pokecard from \"./PokeCard\";\r\nimport \"../css/Pokedex.css\";\r\n\r\nexport default class Pokedex extends Component {\r\n  static defaultProps = {\r\n    pokemon: [\r\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\r\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\r\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\r\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\r\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\r\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\r\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\r\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\r\n    ],\r\n  };\r\n  render() {\r\n    const props = this.props;\r\n    console.log(props);\r\n    return (\r\n      <div className=\"Pokedex\">\r\n        <h2 className={\"Pokedex-header\"}>{props.name}</h2>\r\n        <h3 className={`Pokedex-${props.isWinner ? \"winner\" : \"loser\"}`}>\r\n          {props.isWinner ? \"Winner\" : \"Loser\"}\r\n        </h3>\r\n        <h4>Total Exp: {props.totalExp}</h4>\r\n        <div className=\"Pokedex-cards\">\r\n          {props.pokemon.length\r\n            ? props.pokemon[0].map((poke, idx) => (\r\n                <Pokecard\r\n                  id={poke.id}\r\n                  name={poke.name}\r\n                  types={poke.types}\r\n                  exp={poke.base_experience}\r\n                  key={idx}\r\n                  otherInfo={props.pokemon[1][idx]}\r\n                  abilities={poke.abilities}\r\n                />\r\n              ))\r\n            : \"\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Pokedex from \"./Pokedex\";\r\nimport Axios from \"axios\";\r\nimport \"../css/PokeGame.css\";\r\n\r\nconst POKE_API_BASE_URL = \"https://pokeapi.co/api/v2/\";\r\n\r\nexport default class PokeGame extends Component {\r\n  static defaultProps = {\r\n    pokemon: [\r\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\r\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\r\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\r\n      {\r\n        id: 12,\r\n        name: \"Butterfree\",\r\n        type: \"flying\",\r\n        base_experience: 178,\r\n      },\r\n      {\r\n        id: 25,\r\n        name: \"Pikachu\",\r\n        type: \"electric\",\r\n        base_experience: 112,\r\n      },\r\n      {\r\n        id: 39,\r\n        name: \"Jigglypuff\",\r\n        type: \"normal\",\r\n        base_experience: 95,\r\n      },\r\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\r\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\r\n    ],\r\n  };\r\n\r\n  state = {\r\n    hand1: [],\r\n    hand2: [],\r\n    isLoading: true,\r\n    totalPokemon: 0,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const totalPokemon = await this.getTotalPokemon();\r\n    this.setState({ totalPokemon });\r\n    this.init();\r\n  }\r\n\r\n  init = async () => {\r\n    const totalData1 = await this.initializeHand();\r\n    const totalData2 = await this.initializeHand();\r\n    this.setState({\r\n      hand1: totalData1,\r\n      hand2: totalData2,\r\n      isLoading: false,\r\n    });\r\n    document.querySelector(\"body\").classList.remove(\"fullScreenHeight\");\r\n    document.querySelector(\"#root\").classList.remove(\"fullScreenHeight\");\r\n    document.querySelector(\".App\").classList.remove(\"fullScreenHeight\");\r\n  };\r\n\r\n  getTotalPokemon = async () => {\r\n    const res = await Axios.get(\r\n      `${POKE_API_BASE_URL}pokemon-species/?limit=1`\r\n    );\r\n    return res.data.count;\r\n  };\r\n\r\n  initializeHand = () => {\r\n    try {\r\n      return this.getRandomPoke(this.state.totalPokemon);\r\n    } catch (e) {\r\n      console.log(\"failure\");\r\n    }\r\n  };\r\n\r\n  getRandomPoke = async totalPokemon => {\r\n    const hand = [];\r\n    const data = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const rand = Math.floor(Math.random() * totalPokemon);\r\n      let res = await Axios.get(`${POKE_API_BASE_URL}pokemon/${rand + 1}`);\r\n      hand.push(res.data);\r\n      res = await Axios.get(\r\n        `${POKE_API_BASE_URL}pokemon-species/${rand + 1}`\r\n      );\r\n      data.push(res.data);\r\n    }\r\n    const totalData = [hand, data];\r\n    return totalData;\r\n  };\r\n\r\n  handleClick = async () => {\r\n    this.setState({ hand1: [], hand2: [], isLoading: true });\r\n    document.querySelector(\"body\").classList.add(\"fullScreenHeight\");\r\n    document.querySelector(\"#root\").classList.add(\"fullScreenHeight\");\r\n    document.querySelector(\".App\").classList.add(\"fullScreenHeight\");\r\n    this.init();\r\n  };\r\n\r\n  render() {\r\n    function calcExp(pokedex) {\r\n      let totalExp = 0;\r\n      if (pokedex) {\r\n        pokedex.forEach(pokemon => {\r\n          totalExp += pokemon.base_experience;\r\n        });\r\n        return totalExp;\r\n      }\r\n    }\r\n\r\n    const p1 = this.state.hand1;\r\n    const p2 = this.state.hand2;\r\n    const p1Exp = calcExp(p1[0]);\r\n    const p2Exp = calcExp(p2[0]);\r\n\r\n    return (\r\n      <div\r\n        className={`PokeGame ${\r\n          this.state.isLoading ? \"fullScreenHeight\" : \"\"\r\n        }`}\r\n      >\r\n        {this.state.isLoading ? (\r\n          <i className=\"fas fa-spinner fa-spin fa-8x PokeGame-loading-icon\"></i>\r\n        ) : (\r\n          <>\r\n            <Pokedex\r\n              pokemon={p1}\r\n              name=\"Player 1\"\r\n              isWinner={p1Exp > p2Exp ? true : false}\r\n              totalExp={p1Exp}\r\n            />\r\n            <Pokedex\r\n              pokemon={p2}\r\n              name=\"Player 2\"\r\n              isWinner={p1Exp < p2Exp ? true : false}\r\n              totalExp={p2Exp}\r\n            />\r\n            {!this.state.isLoading && (\r\n              <button\r\n                className=\"PokeGame-restart\"\r\n                onClick={this.handleClick}\r\n              >\r\n                Get More Pokemon?\r\n              </button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../css/App.css\";\r\nimport PokeGame from \"./PokeGame\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App fullScreenHeight\">\r\n      <PokeGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"@fortawesome/fontawesome-free/css/all.css\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}